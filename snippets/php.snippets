snippet puf
	/**
	 * @param ${3:} $$2
	 *
	 * @return ${4}
	 */
	public function ${1}(${5:$3} $${2:})
	{
		${6}
	}
snippet const
	/**
	 * @param ${2:} $$1
	 */
	public function __construct(${3:$2 }$${1:})
	{
		$this->${4:$1} = $$1;
	}
snippet prof
	/**
	 * @param ${3:} $$2
	 *
	 * @return ${4}
	 */
	protected function ${1}(${5:$3} $${2:})
	{
		${6}
	}
snippet prif
	/**
	 * @param ${3:} $$2
	 *
	 * @return ${4}
	 */
	private function ${1}(${5:$3} $${2:})
	{
		${6}
	}
snippet fset
	/**
	 * @param ${3:} $$2
	 *
	 * @return ${4}
	 */
	public function set${1}(${5:$3} $${2:})
	{
		${6}

		return $this;
	}
snippet fget
	/**
	 * @return ${2}
	 */
	public function get${1}()
	{
		return $this->${3}
	}
snippet getset
	/**
	 * @param ${4:} $$2
	 *
	 * @return self
	 */
	public function set${1:}(${5:$4 }$${2:})
	{
		$this->${3:$2} = $$2;

		return $this;
	}
	
	/**
	 * @return ${6:$4}
	 */
	public function get$1()
	{
		return $this->$3;
	}
snippet get
	/**
	 * @return ${2:}
	 */
	public function get${1:}()
	{
		return $this->${3:};
	}
snippet igetset
	/**
	 * @param ${3:} $2
	 *
	 * @return self
	 */
	public function set${1:}(${4:$3 }${2:});
	
	/**
	 * @return ${5:$3}
	 */
	public function get$1();
snippet inj
	/**
	 * @param $1 $$2
	 *
	 * @return self
	 */
	public function inject${1:}($1 $${2:})
	{
		$this->${3:$2} = $$2;

		return $this;
	}
snippet test
	/**
	 * ${2}
	 */
	public function test${1:}()
	{
		${3}
	}
snippet fun
	/**
	 * @param ${4}
	 *
	 * @return ${5}
	 */
	${1:public }function ${2:FunctionName}(${3})
	{
		${6}
	}
snippet #
	//####################################################################
snippet .#
	//################################################################
snippet ..#
	//############################################################
snippet ...#
	//###########################################
snippet ....#
	//#######################################
snippet $q
	$query = "${1:}";
snippet .q
	$query.= "${1:}";
snippet cls
	class ${1:`vim_snippets#Filename()`}${2}
	{
		${3:public} function ${4:__construct}(${5:argument})
		{
			${6}
		}
	}
snippet control
	use Symfony\Bundle\FrameworkBundle\Controller\Controller;

	class ${1:`vim_snippets#Filename()`} extends Controller
	{
		${2:public} function ${3:}Action(${4:argument})
		{
			${5}
		}
	}
snippet act
	public function ${1:some}Action(${2})
	{
		return $this->render(
			'${3}:${4:$1}.html.twig',
			[
				${5}
			]
		);
	}
snippet render
	return $this->render(
		'${1}.html.twig',
		[
			${2}
		]
	);
snippet crform
	$form${1} = $this->createForm(new ${2:$1}Type(), ${3:entity});
snippet @var
	/** @var ${1} */
snippet @auth
	@author ${4:`g:snips_author`}
snippet usea
	use Symfony\Component\Validator\Constraints as Assert;
snippet @as
	* @Assert${1}
snippet @asnb
	* @Assert\NotBlank(${1})
snippet @aslen
	* @Assert\Length(
	*   min = "${1:3}",
	*   max = "${2:255}",
	*   minMessage = "${3:validation.string.too-short}",
	*   maxMessage = "${4:validation.string.too-long}"
	* )
snippet @asgrp
	groups = {"${1}"}
snippet @rt
	@Route("/${1}",
	*     name="${2}",
	*     requirements={
	*         "${3}"="${4}"
	*     }
	* )
snippet asm
	$this->assertSame(${1:expected}, ${2:actual});
snippet exp
	$${1:mock}->expects($this->${2:any}())
		->method('${3:methodName}')
		->will($this->returnValue(${4:value}));
snippet debug
	\Tracy\Debugger::fireLog(${1});
snippet log
	\Tracy\Debugger::fireLog(${1});
snippet dump
	\Tracy\Debugger::barDump(${1});
snippet vdump
	\Tracy\Debugger::dump(${1});
snippet pdebug
	\ProfesiaTracy::fireLog(${1});
snippet plog
	\ProfesiaTracy::fireLog(${1});
snippet pdump
	\ProfesiaTracy::barDump(${1});
snippet pvdump
	\ProfesiaTracy::dump(${1});
snippet ndebug
	\Nette\Diagnostics\Debugger::fireLog(${1});
snippet nlog
	\Nette\Diagnostics\Debugger::fireLog(${1});
snippet ndump
	\Nette\Diagnostics\Debugger::barDump(${1});
snippet trans
	$this->container->get('translator')->trans('${1}');
snippet flash
	$this->get('session')->getFlashBag()->add(
		'${1:info}',
		$this->container->get('translator')->trans('${2}')
	);
snippet sess
	$session = $this->get('session');
snippet php
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	/**
	 * ${4}
	 */
	${2:class} ${3:`vim_snippets#Filename()`}
	{
		${5}
	}

snippet phpi
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	/**
	 * ${4}
	 */
	${2:interface} ${3:`vim_snippets#Filename()`}
	{
		${5}
	}

snippet phpu
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	/**
	 * ${4}
	 */
	${2:class} ${3:`vim_snippets#Filename()`} extends \PHPUnit_Framework_TestCase
	{
		${5}
	}

snippet phpt
	<?php

	use ${1:`vim_snippets#Filename()`};

	$container = require __DIR__ . '/../../bootstrap.php';

	/**
	 * ${4}
	 */
	${2:class} ${3:`vim_snippets#Filename()`}Test extends Tester\TestCase
	{
		/**
		 * Close mockery
		 */
		protected function tearDown()
		{
			Mockery::close();
		}

		${5}
	}

	$testcase = new $3Test();
	$testcase->run();

snippet nsp
	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};
snippet cget
	$this->container->get('${1}');
snippet conget
	$this->container->get('${1}');
snippet flush
	$this->${1:entityManager}->flush();${2}
snippet pers
	$this->${1:entityManager}->persist($${2});
snippet queryb
	$queryBuilder = $this->createQueryBuilder('${1:}');
	$queryBuilder->andWhere('$1.${2:}');

	$query = $queryBuilder->getQuery();

	return $query->getResult();
snippet qb
	$queryBuilder->${1}
snippet qpar
	->setParameter('${1}', ${2}, \PDO::PARAM_${3:INT})
snippet param
	->setParameter('${1}', ${2}, \PDO::PARAM_${3:INT})
snippet expr
	$queryBuilder->expr()->${1:in}(${2})
snippet join
	->join('${1}', '${2}')
snippet where
	->andWhere('${1}')
snippet wherein
	->andWhere($queryBuilder->expr()->in('${1}', '${2}'))
snippet wherexpr
	->andWhere($queryBuilder->expr()->${1:in}('${2}', '${3}'))
snippet qpars
	->setParameters([
		'${1}' => ${2},
	])
snippet redir
	return $this->redirect(
		$this->generateUrl(
			'${1}'
		)
	);
snippet url
	$this->generateUrl(
		'${1}'
	)
snippet @sec
	@Security("has_role('ROLE_${1:ADMIN}')")
snippet formtype
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	use Symfony\Component\Form\AbstractType;
	use Symfony\Component\Form\FormBuilderInterface;
	use Symfony\Component\OptionsResolver\OptionsResolverInterface;
	use Symfony\Component\Form\FormView;
	use Symfony\Component\Form\FormInterface;

	/**
	 * ${3}
	 */
	class ${2:`vim_snippets#Filename()`} extends AbstractType
	{
		/**
		 * @param FormBuilderInterface $builder
		 * @param array                $options
		 */
		public function buildForm(FormBuilderInterface $builder, array $options)
		{
			$builder
				->add();
		}

		/**
		 * @param OptionsResolverInterface $resolver
		 */
		public function setDefaultOptions(OptionsResolverInterface $resolver)
		{
			$resolver->setDefaults([
				'data_class'         => '${4}',
				'cascade_validation' => true,
				'validation_groups'  => [${5}],
			]);
		}

		/**
		 * @return string
		 */
		public function getName()
		{
			return '${6:$2}';
		}

		/**
		 * {@inheritdoc}
		 */
		public function buildView(FormView $view, FormInterface $form, array $options)
		{
			parent::buildView($view, $form, $options);
		}
	}
snippet formhandler
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	use Symfony\Component\Form\FormInterface;
	use Symfony\Component\HttpFoundation\Request;
	use Doctrine\ORM\EntityManagerInterface;

	class ${2:`vim_snippets#Filename()`}
	{
		/** @var EntityManagerInterface */
		private $entityManager;

		/**
		 * @param EntityManagerInterface $entityManager
		 */
		public function __construct(EntityManagerInterface $entityManager)
		{
			$this->entityManager = $entityManager;
		}

		/**
		 * @param FormInterface $form
		 * @param Request       $request
		 *
		 * @return bool
		 */
		public function handle(FormInterface $form, Request $request)
		{
			$form->handleRequest($request);

			if ((!$form->isSubmitted()) || (!$form->isValid())) {
				return false;
			}

			$${3:entity} = $form->getData();

			$this->entityManager->persist($$3);
			$this->entityManager->flush();

			return true;
		}
	}
# unit tests
snippet mock
	$this->getMock('${1:className}');
snippet mockb
	$this->getMockBuilder('${1:className}')
		->disableOriginalConstructor()
		->getMock();
snippet meth
	$${1}->method('${2}')
snippet will
	->will($this->returnValue(${1}));
# mockery
snippet mocksetup
	public function setup()
	{
		Mockery::close();
	}

snippet dbsetup
	public function setup()
	{
		$this->prepareDb();
	}

snippet mmock
	Mockery::mock('${1}');
# silex
snippet share
	$app['${1}'] = $app->share(function(Application $app) {
		return new ${2};
	});
